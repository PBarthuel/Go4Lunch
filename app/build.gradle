apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'jacoco'

android.applicationVariants.all { variant ->
    def variantName = variant.name.capitalize()
    def filesToAnalyze = [
            '**/*ViewModel.class',
            '**/*Repository.class'
    ]

    task("jacoco${variantName}Report", type: JacocoReport, dependsOn: "test${variantName}UnitTest") {
        group 'Reporting'
        description "Generate ${variantName} Jacoco coverage reports."

        reports {
            xml.enabled = true
            html {
                enabled = true
                destination file("${buildDir}/reports/jacoco")
            }
        }

        getSourceDirectories().setFrom(files(android.sourceSets.main.java.srcDirs))
        getExecutionData().setFrom(files("${buildDir}/jacoco/test${variantName}UnitTest.exec"))
        getClassDirectories().setFrom(fileTree(dir: variant.javaCompiler.destinationDir, includes: filesToAnalyze))
    }
}

android {
    compileSdkVersion 29
    defaultConfig {
        applicationId "paul.barthuel.go4lunch"
        minSdkVersion 16
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }
    testOptions {
        unitTests.returnDefaultValues = true
    }
    signingConfigs {
        debug {
            storeFile file('../debug_key_store.jks')
            storePassword 'android'
            keyAlias 'debug_key'
            keyPassword 'android'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'com.google.firebase:firebase-core:18.0.0'
    implementation 'com.google.firebase:firebase-auth:20.0.1'
    implementation 'com.google.android.gms:play-services-auth:19.0.0'
    implementation 'com.google.firebase:firebase-database:19.5.1'
    implementation 'com.google.firebase:firebase-storage:19.2.0'
    implementation 'com.google.firebase:firebase-functions:19.1.0'
    implementation 'com.google.firebase:firebase-messaging:21.0.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.vectordrawable:vectordrawable:1.1.0'
    implementation platform('com.google.firebase:firebase-bom:26.1.1')
    implementation 'com.facebook.android:facebook-android-sdk:7.1.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.14.1'
    implementation 'com.google.android.gms:play-services-location:17.1.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'com.google.firebase:firebase-analytics:18.0.0'
    implementation 'com.google.android.gms:play-services-maps:17.0.0'
    implementation 'com.squareup.retrofit2:retrofit:2.6.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.6.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.14.1'

    def work_version = "2.4.0"
    implementation "androidx.work:work-runtime:$work_version"

    testImplementation 'junit:junit:4.13.1'

    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    implementation 'com.android.support:multidex:1.0.3'

    implementation 'com.github.bumptech.glide:glide:4.11.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.11.0'

    implementation 'com.google.firebase:firebase-firestore:22.0.0'

    implementation 'com.jakewharton.threetenabp:threetenabp:1.2.4'

    // Helps mocking objects (Mockito.mock() or Mockito.spy())
    testImplementation "org.mockito:mockito-core:3.3.3"

    // Helps testing livedata : InstantTaskExecutorRule, for example
    testImplementation "android.arch.core:core-testing:1.1.1"

    testImplementation 'org.threeten:threetenbp:1.4.5'

}
